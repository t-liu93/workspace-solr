<set>
<example>
<id>3ad1a34b056e324541a26b47f2b142c707ca6bcc</id>
<feature>maybe</feature>
<source>Jordan</source>
<confusion></confusion>
<message>Patch Set 2: Code-Review+2

huh. it hadn't occurred to me that this is on the host. maybe 4096 was better after all...</message>
</example>

<example>
<id>09c20387463f1d9ac241e462fd5d0c6e49949d7a</id>
<feature>really</feature>
<source>Lakoff</source>
<confusion></confusion>
<message>Patch Set 1:

Again, this depends on a core makefile change:
https://android-review.googlesource.com/#/c/83994/

Bison is really the most inflexible tool...</message>
</example>

<example>
<id>d1667c55b49cda4299dbbedba607dc827c3a86fe</id>
<feature>almost</feature>
<source>Lakoff</source>
<confusion></confusion>
<message>Patch Set 20:

(14 comments)

Almost there :)</message>
</example>

<example>
<id>8b914b4a24674cdf1ba7deb6d390876c1ab2e779</id>
<feature>actually</feature>
<source>Lakoff</source>
<confusion></confusion>
<message>Patch Set 2:

How does exporting a resource in a library work? Is this the point of the AAR file? (Sorry, I actually don't have experience with this!)</message>
</example>

<example>
<id>f64f0e270df51853e0d8701d26a4d6729744ac5e</id>
<feature>might</feature>
<source>Jordan</source>
<confusion></confusion>
<message>Patch Set 1: Code-Review+1

LGTM overall.

One thing that might be worth emphasizing is that NDK gcc and platform gcc are built from the same source tree, so any changes need to be tested with both the NDK and platform. Not sure if that belongs in your blurb on in the toolchain/gcc/Readme.</message>
</example>

<example>
<id>87d84cd117171d82e5bf9fd10b6eea380ca504bc</id>
<feature>seems</feature>
<source>Jordan</source>
<confusion></confusion>
<message>Patch Set 10:

ok, Linearize() seems to be too intimately related with the global allocator and arena, since the "local" work lists is taken from there anyway.

so I am going to take you up on the offer to refactor this later, and not as part of this CL....</message>
</example>

<example>
<id>f16e5f23f2a81799fbfa47dff0fc653ce5b80c96</id>
<feature>seems</feature>
<source>Jordan</source>
<confusion></confusion>
<message>Patch Set 1:

The patch seems incomplete</message>
</example>

<example>
<id>79ee921068eabb17f7995e3c7bfc9635c60e5a8e</id>
<feature>very</feature>
<source>Lakoff</source>
<confusion></confusion>
<message>Patch Set 2: Code-Review+1

Very clean!</message>
</example>

<example>
<id>68f36e93e7bd43c62681d99f9b4256f51d28a270</id>
<feature>mostly</feature>
<source>Lakoff</source>
<confusion></confusion>
<message>Patch Set 5:

(7 comments)

Mostly questions!</message>
</example>

<example>
<id>13a1f73a5016c188b4f63656eb0cac926c0e20f3</id>
<feature>might</feature>
<source>Jordan</source>
<confusion></confusion>
<message>Patch Set 1: Code-Review+1

Might want to squash https://android-review.googlesource.com/#/c/146719/ into this one so you don't have any broken commits (won't compile as is).</message>
</example>

<example>
<id>9db045c8952e1e57907ee56a1efdcdbaa530b7e4</id>
<feature>very</feature>
<source>Lakoff</source>
<confusion></confusion>
<message>Patch Set 18:

(Latest patch set contains very minor tweaks to FindCoalesceOpportunities(...), and removes a couple unnecessary TODOs)</message>
</example>

<example>
<id>7bcc30f8e09b51970a0949fcaeddecc5d94d04c5</id>
<feature>could</feature>
<source>Jordan</source>
<confusion></confusion>
<message>Patch Set 1:

has anyone tried libunwind on mips? are we in a position where we could flip the switch?</message>
</example>

<example>
<id>06788c1789165ccc4ec28ddf9a5c596d7e008ad4</id>
<feature>mostly</feature>
<source>Lakoff</source>
<confusion></confusion>
<message>Patch Set 5:

(14 comments)

Mostly a bunch of nits.</message>
</example>

<example>
<id>8940a1cf1427432263188be09b16ef2656b4dd43</id>
<feature>seems</feature>
<source>Jordan</source>
<confusion></confusion>
<message>Patch Set 6: Verified+1

Seems to work</message>
</example>

<example>
<id>41218b56f3bcb7e1b2468cdaeb6e2bb60876022e</id>
<feature>could</feature>
<source>Jordan</source>
<confusion></confusion>
<message>Patch Set 1:

Great.
Could push these out from the internal master?

I'll abandon.</message>
</example>

<example>
<id>2d2610a708b4d80aaa60e5af7f18480acd9ab941</id>
<feature>really</feature>
<source>Lakoff</source>
<confusion></confusion>
<message>Patch Set 5: Code-Review+1 Verified+1

Minor cleanup. Ready for review, really.</message>
</example>

<example>
<id>33c985d20d96db1751fca3348b802d8bc3d04007</id>
<feature>could</feature>
<source>Jordan</source>
<confusion></confusion>
<message>Patch Set 4: Code-Review+1

Applying +1 from jaeseo and sungsoo.

Unsuk, could you review this change? Thanks,</message>
</example>

<example>
<id>203d9892fc5041b736ae3eed143e39ac67351c66</id>
<feature>seems</feature>
<source>Jordan</source>
<confusion></confusion>
<message>Patch Set 3: Verified-1

Now that GenSelect seems functional, GenFusedLongCmpBranch is going wrong in the boot image.</message>
</example>

<example>
<id>45730c082b42c00014f23350cea06c681b84cf65</id>
<feature>actually</feature>
<source>Lakoff</source>
<confusion></confusion>
<message>Patch Set 1:

Actually I also don't have permission to merge this change...</message>
</example>

<example>
<id>de55bf4048651c5fbfdcc56588aef07e599d0d6f</id>
<feature>roughly</feature>
<source>Lakoff</source>
<confusion></confusion>
<message>Patch Set 1:

I didn't finish investigating but the failure is due to InstructionSimplifier/GvnOptimization which transform the pattern (pseudocode here)

if (a <= b) {...}
if (a >= b) {...}

into roughly:

r = compare(a,b)
if (r > 0) {...}
if (r < 0) {...}

which in the presence of NaNs is wrong.</message>
</example>

<example>
<id>9f3bc21830b925fcac98ebad30848a5916596a00</id>
<feature>a real</feature>
<source>Lakoff</source>
<confusion></confusion>
<message>Patch Set 4: Code-Review+2

Needs verification on a clean internal master build and the result runs on a  real device.</message>
</example>

<example>
<id>b7562bf1a8583b362c4978fbd3767c3be33e6ac7</id>
<feature>really</feature>
<source>Lakoff</source>
<confusion></confusion>
<message>Patch Set 1:

Did we really need this change?</message>
</example>

<example>
<id>f33746cdb6825621d2ea7bdb5ab54a07c25a36d6</id>
<feature>actually</feature>
<source>Lakoff</source>
<confusion></confusion>
<message>Patch Set 1: Verified+1

i actually couldn't reproduce this on N9, but dimitry lent me his N7 where it was easily reproduceable.</message>
</example>

<example>
<id>f44158a2089925ed60ea8b8c4b082a266799e6ae</id>
<feature>may</feature>
<source>Jordan</source>
<confusion></confusion>
<message>Patch Set 1:

BTW, there may be other places where Checker annotations test methods implemented in Smali.</message>
</example>

<example>
<id>c78525f88c4f8ccf40fa9099aad5777bb303105a</id>
<feature>very</feature>
<source>Lakoff</source>
<confusion></confusion>
<message>Patch Set 1:

https://android-review.googlesource.com/#/c/154741/ introduced file_contexts_asan.  My understanding is that it is a change for a very limited use-case, whereas the m4 userdebug_or_eng macro is used more broadly.  Prefer to leave as-is for the moment before making more macros to address one use-case.</message>
</example>

</set>